services:
  backend:
    build:
      context: ./backend
    container_name: backend
    restart: unless-stopped
    volumes:
      - ./backend:/backend
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    env_file:
      - .env
    depends_on:
      - db
    entrypoint: /backend/entrypoint.sh
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
      args:
        BACKEND_HOST: ${BACKEND_HOST}
    container_name: frontend
    networks:
      - app-network

  db:
    image: postgres:17
    container_name: postgres-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - ${DB_PATH}:/var/lib/postgresql/data
    ports:
      - "${DB_PORT}:5432"
    networks:
      - app-network

  adminer:
    image: adminer
    restart: unless-stopped
    container_name: adminer
    ports:
      - "${ADMINER_PORT}:${ADMINER_PORT}"
    networks:
      - app-network

  # nginx to proxy requests
  nginx:
    image: nginx:stable-alpine
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "./nginx.conf:/etc/nginx/nginx.conf"
      - "/etc/letsencrypt:/etc/letsencrypt"
    depends_on:
      - backend
      - frontend
    networks:
      - app-network

  minio:
    image: minio/minio:latest
    container_name: minio
    restart: always
    ports:
      - "${MINIO_PORT}:${MINIO_PORT}"
      - "${MINIO_WEB_PORT}:${MINIO_WEB_PORT}"
    environment:
      MINIO_ROOT_USER: "${MINIO_ACCESS_KEY}"
      MINIO_ROOT_PASSWORD: "${MINIO_SECRET_KEY}"
    volumes:
      - ${MINIO_PATH}:${MINIO_PATH}
    command: server --console-address ":${MINIO_WEB_PORT}" ${MINIO_PATH}
    networks:
      - app-network

  redis:
    image: redis:alpine
    container_name: redis_cache
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    environment:
      - REDIS_PASSWORD="${REDIS_PASSWORD}"
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
